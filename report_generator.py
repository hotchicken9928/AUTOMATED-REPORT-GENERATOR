import csv
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
from reportlab.lib.units import inch

def generate_sales_report(data_file='sample_data.csv', output_pdf='sales_report.pdf'):
    """
    Reads sales data from a CSV file, analyzes it, and generates a formatted PDF report.

    Args:
        data_file (str): Path to the input CSV data file.
        output_pdf (str): Name of the output PDF report file.
    """

    print(f"Generating report from {data_file}...")

    sales_data = []
    try:
        with open(data_file, mode='r', newline='') as file:
            reader = csv.DictReader(file)
            for row in reader:
                try:
                    row['Quantity'] = int(row['Quantity'])
                    row['Price'] = float(row['Price'])
                    sales_data.append(row)
                except ValueError:
                    print(f"Skipping row due to invalid data: {row}")
                    continue
    except FileNotFoundError:
        print(f"Error: Data file '{data_file}' not found.")
        return
    except Exception as e:
        print(f"An error occurred while reading the data file: {e}")
        return

    if not sales_data:
        print("No valid data found to generate a report.")
        return

    total_sales_value = sum(row['Quantity'] * row['Price'] for row in sales_data)
    total_items_sold = sum(row['Quantity'] for row in sales_data)
    average_item_price = total_sales_value / total_items_sold if total_items_sold > 0 else 0

    sales_by_region = {}
    for row in sales_data:
        region = row['Region']
        value = row['Quantity'] * row['Price']
        sales_by_region[region] = sales_by_region.get(region, 0) + value

    sales_by_product = {}
    for row in sales_data:
        product = row['Product']
        value = row['Quantity'] * row['Price']
        sales_by_product[product] = sales_by_product.get(product, 0) + value

    doc = SimpleDocTemplate(output_pdf, pagesize=letter)
    styles = getSampleStyleSheet()
    story = []

    story.append(Paragraph("Sales Performance Report", styles['h1']))
    story.append(Spacer(1, 0.2 * inch))

    story.append(Paragraph(
        "This report provides an overview of sales performance based on the provided data.",
        styles['Normal']
    ))
    story.append(Spacer(1, 0.2 * inch))

    story.append(Paragraph("Summary Statistics", styles['h2']))
    story.append(Spacer(1, 0.1 * inch))
    story.append(Paragraph(f"Total Sales Value: ${total_sales_value:,.2f}", styles['Normal']))
    story.append(Paragraph(f"Total Items Sold: {total_items_sold:,}", styles['Normal']))
    story.append(Paragraph(f"Average Item Price: ${average_item_price:,.2f}", styles['Normal']))
    story.append(Spacer(1, 0.2 * inch))

    story.append(Paragraph("Sales by Region", styles['h2']))
    story.append(Spacer(1, 0.1 * inch))
    region_data = [['Region', 'Total Sales Value']]
    for region, value in sales_by_region.items():
        region_data.append([region, f"${value:,.2f}"])

    region_table = Table(region_data)
    region_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    story.append(region_table)
    story.append(Spacer(1, 0.2 * inch))

    story.append(Paragraph("Sales by Product", styles['h2']))
    story.append(Spacer(1, 0.1 * inch))
    product_data = [['Product', 'Total Sales Value']]
    for product, value in sales_by_product.items():
        product_data.append([product, f"${value:,.2f}"])

    product_table = Table(product_data)
    product_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    story.append(product_table)
    story.append(Spacer(1, 0.2 * inch))

    story.append(Paragraph(
        "Report generated by Automated Report Generator Script",
        styles['Italic']
    ))
    story.append(Spacer(1, 0.1 * inch))
    story.append(Paragraph(
        "Date: June 4, 2025", 
        styles['Italic']
    ))


    try:
        doc.build(story)
        print(f"Report '{output_pdf}' generated successfully!")
    except Exception as e:
        print(f"An error occurred while building the PDF: {e}")

if __name__ == "__main__":
    generate_sales_report()
